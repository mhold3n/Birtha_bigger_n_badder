version: "3.9"

services:
  api:
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  # Reverse proxy to expose server API + secure worker ingress
  caddy:
    image: caddy:2-alpine
    ports:
      - "8443:443"
    volumes:
      - ./infra/reverse-proxy/Caddyfile.server:/etc/caddy/Caddyfile:ro
      - ./infra/reverse-proxy/Caddyfile.lan:/etc/caddy/Caddyfile.lan:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - api
      - router
    restart: unless-stopped

  # Pi-hole for DNS and ad-blocking
  pihole:
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8081:80/tcp"
    environment:
      - TZ=UTC
      - WEBPASSWORD=${PIHOLE_PASSWORD:-admin}
      - DNS1=${PIHOLE_UPSTREAM_DNS:-1.1.1.1}
      - DNS2=8.8.8.8
      - DNSMASQ_LISTENING=all
      - PIHOLE_DNS_1=1.1.1.1
      - PIHOLE_DNS_2=1.0.0.1
      - ServerIP=192.168.50.107
      - FTLCONF_dns_listeningMode=ALL
    volumes:
      - pihole_data:/etc/pihole
      - pihole_dnsmasq:/etc/dnsmasq.d
      - ./infra/dns/pihole/custom.list:/etc/pihole/custom.list:ro
      - ./infra/dns/pihole/local-dns.conf:/etc/dnsmasq.d/99-local-dns.conf:ro
    cap_add:
      - NET_ADMIN
    restart: unless-stopped

  # WireGuard VPN server
  wireguard:
    image: linuxserver/wireguard:latest
    ports:
      - "${WG_PORT:-51820}:51820/udp"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
      - SERVERURL=${SERVER_PUBLIC_HOST:-server.local}
      - SERVERPORT=${WG_PORT:-51820}
      - PEERS=dev1,dev2,dev3
      - PEERDNS=auto
      - INTERNAL_SUBNET=10.0.0.0
    volumes:
      - ./infra/networking/wireguard:/config
      - /lib/modules:/lib/modules:ro
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped

  # Global MCP Servers
  mcp-github:
    build:
      context: ./mcp/servers/github-mcp
    environment:
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_OWNER=${GITHUB_OWNER}
    ports:
      - "7000:7000"
    restart: unless-stopped

  mcp-filesystem:
    build:
      context: ./mcp/servers/filesystem-mcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./:/workspace:ro
      - /mnt/appdata/addons/documents:/mnt/appdata/addons/documents:ro
      - /mnt/appdata/addons/documents_processed:/mnt/appdata/addons/documents_processed:ro
    ports:
      - "7001:7001"
    restart: unless-stopped

  mcp-secrets:
    build:
      context: ./mcp/servers/secrets-mcp
    environment:
      - VAULT_ADDR=${VAULT_ADDR:-http://vault:8200}
      - VAULT_TOKEN=${VAULT_TOKEN}
    ports:
      - "7002:7002"
    restart: unless-stopped

  mcp-vector-db:
    build:
      context: ./mcp/servers/vector-db-mcp
    environment:
      - QDRANT_URL=${QDRANT_URL:-http://qdrant:6333}
    ports:
      - "7003:7003"
    depends_on:
      - qdrant
    restart: unless-stopped

  # Vector database for embeddings
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped

  # Vault for secrets management
  vault:
    image: hashicorp/vault:latest
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    restart: unless-stopped

  # Homarr dashboard
  homarr:
    image: ghcr.io/ajnart/homarr:latest
    ports:
      - "7576:7575"
    environment:
      - TZ=UTC
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infra/homarr/configs:/app/data/configs
      - ./infra/homarr/icons:/app/public/icons
      - homarr_data:/data
    depends_on:
      - api
      - router
      - prometheus
      - grafana
    restart: unless-stopped

  # Node Exporter for host metrics (matches Prometheus job 'node-exporter')
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    pid: host
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

volumes:
  caddy_data:
  caddy_config:
  pihole_data:
  pihole_dnsmasq:
  qdrant_data:
  homarr_data:
